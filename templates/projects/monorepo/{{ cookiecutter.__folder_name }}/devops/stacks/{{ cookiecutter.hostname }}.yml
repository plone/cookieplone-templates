---
version: '3.9'

services:

{%- if cookiecutter.devops_cache == '1' %}

  purger:
    image: ghcr.io/kitconcept/cluster-purger:latest
    environment:
      PURGER_SERVICE_NAME: {{ cookiecutter.__devops_stack_name}}_varnish
      PURGER_SERVICE_PORT: 80
      PURGER_PUBLIC_SITES: "['${STACK_HOSTNAME:-{{ cookiecutter.hostname }}}']"
    networks:
      - {{ cookiecutter.__devops_swarm_public_network }}
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first

  varnish:
    image: {{ cookiecutter.__container_image_prefix }}-varnish:${IMAGE_TAG:-latest}
    command:
      - '-p'
      - 'nuke_limit=2000'
      - '-p'
      - 'workspace_client=192k'
      - '-p'
      - 'workspace_backend=192k'
    networks:
      - {{ cookiecutter.__devops_swarm_public_network }}
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
      labels:
        - traefik.enable=true
        - traefik.constraint-label=public
        # Services
        - traefik.http.services.svc-{{ cookiecutter.__devops_stack_prefix }}-varnish.loadbalancer.server.port=80
        # Routers
        ## Router: Varnish Public
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-varnish-public.rule=Host(`${STACK_HOSTNAME:-{{ cookiecutter.hostname }}}`)
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-varnish-public.entrypoints=https
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-varnish-public.tls=true
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-varnish-public.tls.certresolver=le
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-varnish-public.service=svc-{{ cookiecutter.__devops_stack_prefix }}-varnish
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-varnish-public.middlewares=gzip
{%- endif %}

  frontend:
    image: {{ cookiecutter.__container_image_prefix }}-frontend:${IMAGE_TAG:-latest}
    environment:
      RAZZLE_INTERNAL_API_PATH: http://{{ cookiecutter.__devops_stack_name}}_backend:8080/Plone
      RAZZLE_API_PATH: https://${STACK_HOSTNAME:-{{ cookiecutter.hostname }}}
    networks:
      - {{ cookiecutter.__devops_swarm_public_network }}
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
      labels:
        - traefik.enable=true
        - traefik.constraint-label=public
        # Service
        - traefik.http.services.svc-{{ cookiecutter.__devops_stack_prefix }}-frontend.loadbalancer.server.port=3000
        # Routers
{%- if cookiecutter.devops_cache == '0' %}
        ## /
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-frontend.rule=Host(`${STACK_HOSTNAME:-{{ cookiecutter.hostname }}}`)
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-frontend.entrypoints=https
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-frontend.tls=true
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-frontend.tls.certresolver=le
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-frontend.service=svc-{{ cookiecutter.__devops_stack_prefix }}-frontend
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-frontend.middlewares=gzip
{%- else %}
        ## / (Internal)
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-frontend.rule=Host(`${STACK_HOSTNAME:-{{ cookiecutter.hostname }}}`) && Headers(`X-Varnish-Routed`, `1`)
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-frontend.entrypoints=http
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-frontend.service=svc-{{ cookiecutter.__devops_stack_prefix }}-frontend
{%- endif %}

  backend:
    image: {{ cookiecutter.__container_image_prefix }}-backend:${IMAGE_TAG:-latest}
{%- if cookiecutter.devops_storage == 'relstorage' %}
    environment:
      RELSTORAGE_DSN: "dbname='${DB_NAME:-plone}' user='${DB_USER:-plone}' host='${DB_HOST:-{{ cookiecutter.__devops_stack_name}}_db}' password='${DB_PASSWORD:-{{ cookiecutter.__devops_db_password }}}' port='${DB_PORT:-5432}'"
{%- elif cookiecutter.devops_storage == 'zeo' %}
    environment:
      ZEO_ADDRESS: "{ cookiecutter.__devops_stack_name}}_db:8100"
{%- else %}
    volumes:
      - vol-site-data:/data
{%- endif %}
    networks:
      - {{ cookiecutter.__devops_swarm_public_network }}
      - {{ cookiecutter.__devops_swarm_stack_network }}
    deploy:
{%- if cookiecutter.devops_storage in ('relstorage', 'zeo') %}
      replicas: 2
{%- else %}
      replicas: 1
{%- endif %}
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
      labels:
        - traefik.enable=true
        - traefik.constraint-label=public
        # Services
        - traefik.http.services.svc-{{ cookiecutter.__devops_stack_prefix }}-backend.loadbalancer.server.port=8080
        # Middlewares
        ## VHM rewrite /++api++/
        - "traefik.http.middlewares.mw-{{ cookiecutter.__devops_stack_prefix }}-backend-vhm-api.replacepathregex.regex=^/\\+\\+api\\+\\+($$|/.*)"
        - "traefik.http.middlewares.mw-{{ cookiecutter.__devops_stack_prefix }}-backend-vhm-api.replacepathregex.replacement=/VirtualHostBase/https/${STACK_HOSTNAME:-{{ cookiecutter.hostname }}}/Plone/++api++/VirtualHostRoot$$1"
        ## VHM rewrite /ClassicUI/
        - "traefik.http.middlewares.mw-{{ cookiecutter.__devops_stack_prefix }}-backend-vhm-classic.replacepathregex.regex=^/ClassicUI($$|/.*)"
        - "traefik.http.middlewares.mw-{{ cookiecutter.__devops_stack_prefix }}-backend-vhm-classic.replacepathregex.replacement=/VirtualHostBase/https/${STACK_HOSTNAME:-{{ cookiecutter.hostname }}}/Plone/VirtualHostRoot/_vh_ClassicUI$$1"
        ## Basic Authentication
        ### Note: all dollar signs in the hash need to be doubled for escaping.
        ### To create user:password pair, it's possible to use this command:
        ### echo $(htpasswd -nb user password) | sed -e s/\\$/\\$\\$/g
        ### Defaults to admin:admin
        - traefik.http.middlewares.mw-{{ cookiecutter.__devops_stack_prefix }}-backend-auth.basicauth.headerField=X-Auth-ClassicUI
        - traefik.http.middlewares.mw-{{ cookiecutter.__devops_stack_prefix }}-backend-auth.basicauth.users=admin:$$apr1$$uZPT5Fgu$$AmlIdamxT5ipBvPlsdfD70

        # Routes
{%- if cookiecutter.devops_cache == '0' %}
        ## /++api++
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-backend-api.rule=Host(`${STACK_HOSTNAME:-{{ cookiecutter.hostname }}}`) && PathPrefix(`/++api++`)
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-backend-api.entrypoints=https
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-backend-api.tls=true
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-backend-api.service=svc-{{ cookiecutter.__devops_stack_prefix }}-backend
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-backend-api.middlewares=gzip,mw-{{ cookiecutter.__devops_stack_prefix }}-backend-vhm-api
{%- else %}
        ## /++api++ (Internal)
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-backend-api.rule=Host(`${STACK_HOSTNAME:-{{ cookiecutter.hostname }}}`) && PathPrefix(`/++api++`) && Headers(`X-Varnish-Routed`, `1`)
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-backend-api.entrypoints=http
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-backend-api.service=svc-{{ cookiecutter.__devops_stack_prefix }}-backend
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-backend-api.middlewares=mw-{{ cookiecutter.__devops_stack_prefix }}-backend-vhm-api
{%- endif %}
        ## /ClassicUI
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-backend-classic.rule=Host(`${STACK_HOSTNAME:-{{ cookiecutter.hostname }}}`) && PathPrefix(`/ClassicUI`)
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-backend-classic.entrypoints=https
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-backend-classic.tls=true
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-backend-classic.service=svc-{{ cookiecutter.__devops_stack_prefix }}-backend
        - traefik.http.routers.rt-{{ cookiecutter.__devops_stack_prefix }}-backend-classic.middlewares=gzip,mw-{{ cookiecutter.__devops_stack_prefix }}-backend-auth,mw-backend-vhm-classic

{%- if cookiecutter.devops_storage in ('relstorage', 'zeo') %}

  db:
{%- if cookiecutter.devops_storage == 'relstorage' %}
    image: postgres:{{ cookiecutter.__devops_db_version }}
    environment:
      POSTGRES_USER: plone
      POSTGRES_PASSWORD: {{ cookiecutter.__devops_db_password }}
      POSTGRES_DB: plone
    volumes:
      - vol-site-data:/var/lib/postgresql/data
{%- elif cookiecutter.devops_storage == 'zeo' %}
    image: plone/plone-zeo:{{ cookiecutter.__devops_zeo_version }}
    volumes:
      - vol-site-data:/data
{%- endif %}
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 1s
        order: stop-first
    networks:
      - {{ cookiecutter.__devops_swarm_stack_network }}
{%- endif %}

volumes:
  vol-traefik-certs: {}
  vol-site-data: {}

networks:
  {{ cookiecutter.__devops_swarm_public_network }}:
    external: true
  {{ cookiecutter.__devops_swarm_stack_network }}:
    internal: true
    driver: overlay
