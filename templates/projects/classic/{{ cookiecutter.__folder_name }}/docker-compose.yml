---
name: {{ cookiecutter.__devops_compose_name }}

services:
  traefik:
    image: traefik:{{ cookiecutter.__devops_traefik_version }}

    ports:
      - 80:80

    labels:
      - traefik.enable=true
      - traefik.constraint-label=public
{%- if cookiecutter.__devops_traefik_local_include_ui == 'yes' %}
      - traefik.http.routers.traefik-public-http.rule=Host(`traefik.{{ cookiecutter.__project_slug }}.localhost`)
      - traefik.http.routers.traefik-public-http.entrypoints=http
      - traefik.http.routers.traefik-public-http.service=api@internal
      - traefik.http.services.traefik-public.loadbalancer.server.port=8000
{%- endif %}

      # GENERIC MIDDLEWARES
      - traefik.http.middlewares.gzip.compress=true
      - traefik.http.middlewares.gzip.compress.excludedcontenttypes=image/png, image/jpeg, font/woff2

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

    command:
      - --providers.docker
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `public`)
      - --providers.docker.exposedbydefault=false
      - --entrypoints.http.address=:80
      - --accesslog
      - --log
      - --api

{%- if cookiecutter.devops_cache == '1' %}
  purger:
    image: ghcr.io/kitconcept/cluster-purger:latest
    environment:
      PURGER_SERVICE_NAME: varnish
      PURGER_SERVICE_PORT: 80
      PURGER_MODE: "compose"
      PURGER_PUBLIC_SITES: "['{{ cookiecutter.__project_slug }}.localhost']"

  varnish:
    build:
      context: devops/varnish
    labels:
      - traefik.enable=true
      - traefik.constraint-label=public
      # SERVICE
      - traefik.http.services.svc-varnish.loadbalancer.server.port=80
    depends_on:
      - backend

{%- endif %}

  backend:
    build:
      context: ./backend
      args:
        - PLONE_VERSION=${PLONE_VERSION}
{%- if cookiecutter.devops_storage == 'relstorage' %}
    environment:
      RELSTORAGE_DSN: "dbname='${DB_NAME:-plone}' user='${DB_NAME:-plone}' host='${DB_HOST:-db}' password='${DB_PASSWORD:-{{ cookiecutter.__devops_db_password }}}' port='${DB_PORT:-5432}'"
    depends_on:
      - db
{%- elif cookiecutter.devops_storage == 'zeo' %}
    environment:
      ZEO_ADDRESS: "zeo:8100"
    depends_on:
      - zeo
{%- else %}
    volumes:
      - vol-site-data:/data
{%- endif %}
    labels:
      - traefik.enable=true
      - traefik.constraint-label=public
      # Service
      - traefik.http.services.svc-backend.loadbalancer.server.port=8080

      # Middleware
      ## VHM points to /Plone
      - "traefik.http.middlewares.mw-backend-vhm-classic.addprefix.prefix=/VirtualHostBase/http/{{ cookiecutter.__project_slug }}.localhost/Plone/VirtualHostRoot/"

      # Routers
      {%- if cookiecutter.devops_cache == '0' %}
      ## From incoming directly to backend
      - traefik.http.routers.rt-backend-api.rule=Host(`{{ cookiecutter.__project_slug }}.localhost`)
      - traefik.http.routers.rt-backend-api.entrypoints=http
      - traefik.http.routers.rt-backend-api.service=svc-backend
      - traefik.http.routers.rt-backend-api.middlewares=gzip,mw-backend-vhm-classic
      {%- endif %}
      {%- if cookiecutter.devops_cache == '1' %}
      ## Router: From incoming to Varnish (public)
      - traefik.http.routers.rt-backend-public.rule=Host(`{{ cookiecutter.__project_slug }}.localhost`)
      - traefik.http.routers.rt-backend-public.entrypoints=http
      - traefik.http.routers.rt-backend-public.service=svc-varnish
      - traefik.http.routers.rt-backend-public.middlewares=gzip

      ## Router: from Varnish to backend (internal)
      - traefik.http.routers.rt-backend-internal.rule=Host(`{{ cookiecutter.__project_slug }}.localhost`) && Headers(`X-Varnish-Routed`, `1`)
      - traefik.http.routers.rt-backend-internal.entrypoints=http
      - traefik.http.routers.rt-backend-internal.service=svc-backend
      - traefik.http.routers.rt-backend-internal.middlewares=mw-backend-vhm-classic
      {%- endif %}

{%- if cookiecutter.devops_storage == 'relstorage' %}

  db:
    image: postgres:{{ cookiecutter.__devops_db_version }}
    environment:
      POSTGRES_USER: plone
      POSTGRES_PASSWORD: {{ cookiecutter.__devops_db_password }}
      POSTGRES_DB: plone
    volumes:
      - vol-site-data:/var/lib/postgresql/data
{%- elif cookiecutter.devops_storage == 'zeo' %}

  zeo:
    image: plone/plone-zeo:{{ cookiecutter.__devops_zeo_version }}
    volumes:
      - vol-site-data:/data
{%- endif %}

volumes:
  vol-site-data: {}