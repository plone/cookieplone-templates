name: {{ cookiecutter.python_package_name }} CI

on:
  push:

env:
  PYTHON_VERSION: "{{ cookiecutter.__gha_python_version }}"
  PLONE_VERSION: "{{ cookiecutter.__gha_plone_version }}"

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:

        - name: Checkout
          uses: actions/checkout@{{ cookiecutter.__gha_version_checkout }}

        - name: Install the latest version of uv
          uses: astral-sh/setup-uv@{{ cookiecutter.__gha_version_setup_uv }}
          with:
            python-version: {{ "${{ env.PYTHON_VERSION }}" }}
            enable-cache: true

        - name: Check formatting
          if: {{ "${{ success() || failure() }}" }}
          id: ruff-format
          run: uvx ruff@latest format --diff

        - name: Check lint
          if: {{ "${{ success() || failure() }}" }}
          id: ruff-lint
          run: uvx ruff@latest check --diff

        - name: Check XML / ZCML
          if: {{ "${{ success() || failure() }}" }}
          id: zpretty
          run: uvx zpretty@latest --check src

        - name: Check Package Metadata
          if: {{ "${{ success() || failure() }}" }}
          id: pyroma
          run: uvx pyroma@latest -d .

        - name: Check Python Versions
          if: {{ "${{ success() || failure() }}" }}
          id: py-versions
          run: uvx check-python-versions@latest .

        - name: Report
          if: {{ "${{ success() || failure() }}" }}
          run: |
            echo '# Code Analysis' >> $GITHUB_STEP_SUMMARY
            echo '| Test | Status |' >> $GITHUB_STEP_SUMMARY
            echo '| --- | --- |' >> $GITHUB_STEP_SUMMARY
            echo '| Format | {{ "${{ steps.ruff-format.conclusion == 'failure' && '❌' || ' ✅' }}" }} |' >> $GITHUB_STEP_SUMMARY
            echo '| Lint | {{ "${{ steps.ruff-lint.conclusion == 'failure' && '❌' || ' ✅' }}" }} |' >> $GITHUB_STEP_SUMMARY
            echo '| XML / ZCML | {{ "${{ steps.zpretty.conclusion == 'failure' && '❌' || ' ✅' }}" }} |' >> $GITHUB_STEP_SUMMARY
            echo '| Package Metadata | {{ "${{ steps.pyroma.conclusion == 'failure' && '❌' || ' ✅' }}" }} |' >> $GITHUB_STEP_SUMMARY
            echo '| Python Versions | {{ "${{ steps.py-versions.conclusion == 'failure' && '❌' || ' ✅' }}" }} |' >> $GITHUB_STEP_SUMMARY

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: {{ cookiecutter.__gha_python_versions }}
        plone-version: {{ cookiecutter.__gha_plone_versions }}
    env:
      PYTHON_VERSION: {{ "${{ env.PYTHON_VERSION }}" }}
      PLONE_VERSION: {{ "${{ env.PLONE_VERSION }}" }}
    steps:

        - name: Checkout
          uses: actions/checkout@{{ cookiecutter.__gha_version_checkout }}

        - name: Install the latest version of uv
          uses: astral-sh/setup-uv@{{ cookiecutter.__gha_version_setup_uv }}
          with:
            python-version: {{ "${{ env.PYTHON_VERSION }}" }}
            enable-cache: false

        - name: Restore uv cache
          uses: actions/cache@{{ cookiecutter.__gha_version_cache }}
          with:
            path: {{ "${{ env.UV_CACHE_DIR }}" }}
            key: uv-{{ "${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ env.PLONE_VERSION }}-${{ hashFiles('pyproject.toml') }}" }}
            restore-keys: |
              uv-{{ "${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ env.PLONE_VERSION }}-${{ hashFiles('pyproject.toml') }}" }}
              uv-{{ "${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ env.PLONE_VERSION }}" }}

        - name: Install Plone and package
          run: make install

        - name: Run tests
          run: make test

  coverage:
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
        - name: Checkout
          uses: actions/checkout@{{ cookiecutter.__gha_version_checkout }}

        - name: Install the latest version of uv
          uses: astral-sh/setup-uv@{{ cookiecutter.__gha_version_setup_uv }}
          with:
            python-version: {{ "${{ env.PYTHON_VERSION }}" }}
            enable-cache: false

        - name: Restore uv cache
          uses: actions/cache@{{ cookiecutter.__gha_version_cache }}
          with:
            path: /tmp/.uv-cache
            key: uv-{{ "${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ env.PLONE_VERSION }}-${{ hashFiles('pyproject.toml') }}" }}
            restore-keys: |
              uv-{{ "${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ env.PLONE_VERSION }}-${{ hashFiles('pyproject.toml') }}" }}
              uv-{{ "${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ env.PLONE_VERSION }}" }}

        - name: Install Plone and package
          run: make install

        - name: Run tests
          run: make test-coverage

        - name: Report Coverage
          run: |
            echo "# Coverage Report" >> $GITHUB_STEP_SUMMARY
            echo "$(uv run coverage report --format markdown)" >> $GITHUB_STEP_SUMMARY
