name: Frontend CI

on:
  push:
    paths:
      - "frontend/**"
      - ".github/workflows/frontend.yml"
  workflow_dispatch:

env:
  IMAGE_NAME_PREFIX: {{ cookiecutter.__container_image_prefix }}
  IMAGE_NAME_SUFFIX: frontend
  NODE_VERSION: {{ cookiecutter.__node_version }}.x

defaults:
  run:
    working-directory: ./frontend

jobs:
  meta:
    runs-on: ubuntu-latest
    outputs:
      BASE_TAG: {{"${{ steps.vars.outputs.BASE_TAG }}"}}
      VOLTO_VERSION: {{"${{ steps.vars.outputs.VOLTO_VERSION }}"}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Compute several vars needed for the build
        id: vars
        run: |
          echo 'BASE_TAG=sha-$(git rev-parse --short HEAD)' >> $GITHUB_OUTPUT
          python3 -c 'import json; data = json.load(open("./mrs.developer.json")); print("VOLTO_VERSION=" + (data["core"].get("tag") or "latest"))' >> $GITHUB_OUTPUT
      - name: Test vars
        run: |
          echo 'BASE_TAG={{"${{ steps.vars.outputs.BASE_TAG }}"}}'
          echo 'VOLTO_VERSION={{"${{ steps.vars.outputs.VOLTO_VERSION }}"}}'

  code-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@{{ cookiecutter.__gha_version_checkout }}

      - name: Use Node.js {{ "${{ env.node-version }}" }}
        uses: actions/setup-node@{{ cookiecutter.__gha_version_setup_node }}
        with:
          node-version: {{ "${{ env.NODE_VERSION }}" }}

      - name: Enable corepack
        run: corepack enable

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@{{ cookiecutter.__gha_version_cache }}
        name: Setup pnpm cache
        with:
          path: {{"${{ env.STORE_PATH }}"}}
          key: {{"${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}"}}
          restore-keys: |
            {{"${{ runner.os }}"}}-pnpm-store-

      - name: Install dependencies
        run: make install

      - name: Linting
        id: lint
        if: {{ "${{ success() || failure() }}" }}
        run: make lint

      - name: i18n sync
        id: i18n
        if: {{ "${{ success() || failure() }}" }}
        run: make ci-i18n

      - name: Unit Tests
        id: unit
        if: {{ "${{ success() || failure() }}" }}
        run: make test

      - name: Report
        if: {{ "${{ success() || failure() }}" }}
        run: |
          echo '# Code Analysis' >> $GITHUB_STEP_SUMMARY
          echo '| Test | Status |' >> $GITHUB_STEP_SUMMARY
          echo '| --- | --- |' >> $GITHUB_STEP_SUMMARY
          {{ "echo '| Lint | ${{ steps.lint.conclusion == 'failure' && '❌' || ' ✅' }} |' >> $GITHUB_STEP_SUMMARY" }}
          {{ "echo '| i18n | ${{ steps.i18n.conclusion == 'failure' && '❌' || ' ✅' }} |' >> $GITHUB_STEP_SUMMARY" }}
          {{ "echo '| Unit Tests | ${{ steps.unit.conclusion == 'failure' && '❌' || ' ✅' }} |' >> $GITHUB_STEP_SUMMARY " }}

  release:
    runs-on: ubuntu-latest
    needs:
      - meta
      - code-analysis
    permissions:
      contents: read
      packages: write

    steps:

      - name: Checkout
        uses: actions/checkout@{{ cookiecutter.__gha_version_checkout }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@{{ cookiecutter.__gha_version_docker_metadata }}
        with:
          images: |
            {{ "${{ env.IMAGE_NAME_PREFIX }}-${{ env.IMAGE_NAME_SUFFIX }}" }}
          labels: |
            org.label-schema.docker.cmd=docker run -d -p 3000:3000 {{ "${{ env.IMAGE_NAME_PREFIX }}-${{ env.IMAGE_NAME_SUFFIX }}" }}:latest
          flavor:
            latest=false
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable={{ "{{is_default_branch}}" }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@{{ cookiecutter.__gha_version_docker_qemu }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@{{ cookiecutter.__gha_version_docker_buildx }}

      - name: Login to Container Registry
        uses: docker/login-action@{{ cookiecutter.__gha_version_docker_login }}
        with:
          {%- if cookiecutter.container_registry == 'docker_hub' %}
          username: {{"${{ secrets.DOCKERHUB_USERNAME }}"}}
          password: {{"${{ secrets.DOCKERHUB_TOKEN }}"}}
          {%- endif %}
          {%- if cookiecutter.container_registry == 'github' %}
          registry: ghcr.io
          username: {{"${{ github.actor }}"}}
          password: {{"${{ secrets.GITHUB_TOKEN }}"}}
          {%- endif %}

      - name: Build and push
        uses: docker/build-push-action@{{ cookiecutter.__gha_version_docker_build_push }}
        with:
          platforms: linux/amd64
          context: frontend/
          file: frontend/Dockerfile
          push: {{"${{ github.event_name != 'pull_request' }}"}}
          tags: {{"${{ steps.meta.outputs.tags }}"}}
          labels: {{"${{ steps.meta.outputs.labels }}"}}
          build-args: |
            VOLTO_VERSION={{"${{ needs.meta.outputs.VOLTO_VERSION }}"}}
